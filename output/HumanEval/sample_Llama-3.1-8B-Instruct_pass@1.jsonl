{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    This function separates groups of nested parentheses in a given string into separate strings.\n\n    Args:\n        paren_string (str): A string containing multiple groups of nested parentheses.\n\n    Returns:\n        List[str]: A list of strings, each representing a separate group of parentheses.\n    \"\"\"\n\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n\n    # Initialize an empty list to store the separated groups\n    groups = []\n\n    # Initialize an empty string to build the current group\n    current_group = \"\"\n\n    # Initialize a counter to keep track of the balance of parentheses\n    balance = 0\n\n    # Iterate over each character in the string\n    for char in paren_string:\n        # If the character is an open parenthesis, increment the balance\n        if char == \"(\":\n            balance += 1\n            current_group += char\n        # If the character is a close parenthesis, decrement the balance\n        elif char == \")\":\n            balance -= 1\n            current_group += char\n            # If the balance is zero, it means we've reached the end of a group\n            if balance == 0:\n                groups.append(current_group)\n                current_group = \"\"\n        # If the character is not a parenthesis, skip it\n        else:\n            continue\n\n    # Return the list of separated groups\n    return groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    This function checks if at any point the balance of a bank account falls below zero.\n\n    Args:\n    operations (List[int]): A list of deposit and withdrawal operations on a bank account.\n\n    Returns:\n    bool: True if the balance falls below zero at any point, False otherwise.\n    \"\"\"\n\n    balance = 0  # Initialize the balance to zero\n\n    for operation in operations:  # Iterate over each operation in the list\n        balance += operation  # Add the operation to the balance\n\n        if balance < 0:  # Check if the balance is less than zero\n            return True  # If it is, return True immediately\n\n    return False  # If we've iterated over all operations and the balance is still non-negative, return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation \n    around the mean of this dataset.\n\n    Mean Absolute Deviation is the average absolute difference between each \n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n\n    :param numbers: A list of float numbers\n    :return: The mean absolute deviation of the input list\n    \"\"\"\n    # Calculate the mean of the input list\n    mean = sum(numbers) / len(numbers)\n\n    # Calculate the absolute difference between each element and the mean\n    absolute_deviations = [abs(num - mean) for num in numbers]\n\n    # Calculate the mean of the absolute deviations\n    mad = sum(absolute_deviations) / len(absolute_deviations)\n\n    return mad"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    This function takes a string of nested parentheses as input, separated by spaces.\n    It returns a list of the maximum nesting depth for each group of parentheses.\n\n    :param paren_string: A string of nested parentheses separated by spaces.\n    :return: A list of the maximum nesting depth for each group of parentheses.\n    \"\"\"\n\n    # Split the input string into groups of parentheses\n    groups = paren_string.split()\n\n    # Initialize an empty list to store the results\n    results = []\n\n    # Iterate over each group of parentheses\n    for group in groups:\n        # Initialize a stack to keep track of the nesting depth\n        stack = 0\n        # Initialize the maximum nesting depth for the current group\n        max_depth = 0\n\n        # Iterate over each character in the group\n        for char in group:\n            # If the character is an opening parenthesis, increment the stack\n            if char == '(':\n                stack += 1\n                # Update the maximum nesting depth if necessary\n                max_depth = max(max_depth, stack)\n            # If the character is a closing parenthesis, decrement the stack\n            elif char == ')':\n                stack -= 1\n\n        # Append the maximum nesting depth for the current group to the results\n        results.append(max_depth)\n\n    # Return the list of results\n    return results"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n\n    Args:\n        numbers (List[int]): A list of integers.\n\n    Returns:\n        Tuple[int, int]: A tuple containing the sum and product of the input list.\n    \"\"\"\n    # Initialize sum and product variables to 0 and 1 respectively\n    total_sum = 0\n    total_product = 1\n\n    # Iterate over each number in the list\n    for num in numbers:\n        # Add the current number to the total sum\n        total_sum += num\n        # Multiply the current number with the total product\n        total_product *= num\n\n    # Return the total sum and product as a tuple\n    return total_sum, total_product"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    # Find the longest palindromic suffix\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[-i:]):\n            # The longest palindromic suffix is found, now append the reverse of the prefix\n            return string + string[-i:][::-1]\n\n    # If no palindromic suffix is found, return the original string\n    return string"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" \n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a)!= len(b):\n        raise ValueError(\"Input strings must be of the same length\")\n\n    result = ''\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '1':\n            result += '0'\n        elif a[i] == '0' and b[i] == '0':\n            result += '0'\n        else:\n            result += '1'\n\n    return result"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b!= 0:\n        a, b = b, a % b\n    return abs(a)"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return''.join(map(str, range(n + 1)))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n\n    Args:\n        string (str): The input string\n\n    Returns:\n        int: The number of distinct characters in the string\n    \"\"\"\n    # Convert the string to lowercase to ignore case sensitivity\n    string = string.lower()\n\n    # Use a set to store unique characters\n    unique_chars = set(string)\n\n    # Return the number of unique characters\n    return len(unique_chars)"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    This function takes a string of musical notes in a special ASCII format and returns a list of integers\n    corresponding to how many beats each note lasts.\n\n    :param music_string: A string representing musical notes\n    :return: A list of integers representing the duration of each note\n    \"\"\"\n    # Create a dictionary to map the note symbols to their corresponding durations\n    note_durations = {'o': 4, 'o|': 2, '.|': 1}\n\n    # Split the input string into a list of notes\n    notes = music_string.split()\n\n    # Use a list comprehension to create a list of note durations\n    # For each note, look up its duration in the dictionary and add it to the list\n    note_durations_list = [note_durations[note] for note in notes]\n\n    return note_durations_list"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # Split the input string into a list of numbers\n    num_list: List[str] = numbers.split()\n\n    # Define a dictionary to map string numbers to their integer values\n    num_dict: dict = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, \n        'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9\n    }\n\n    # Sort the list of numbers based on their integer values\n    sorted_list: List[str] = sorted(num_list, key=lambda x: num_dict[x])\n\n    # Join the sorted list back into a string\n    sorted_str: str =''.join(sorted_list)\n\n    return sorted_str"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # First, sort the list of numbers in ascending order\n    numbers.sort()\n\n    # Initialize the minimum difference and the pair of closest numbers\n    min_diff = float('inf')  # Initialize with positive infinity\n    closest_pair = ()\n\n    # Iterate over the sorted list to find the closest pair\n    for i in range(len(numbers) - 1):\n        # Calculate the absolute difference between the current number and the next number\n        diff = abs(numbers[i] - numbers[i + 1])\n\n        # If the difference is smaller than the current minimum difference, update the minimum difference and the closest pair\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: list[float]) -> list[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    if min_val == max_val:\n        return [0.0] * len(numbers)\n\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\"\n    Return length of given string\n\n    Args:\n        string (str): The input string\n\n    Returns:\n        int: The length of the string\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    def prime_factors(n: int) -> List[int]:\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    return sorted(list(set(prime_factors(n))))"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return ''.join(char.swapcase() for char in string)"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    # Check if the list has an even number of coefficients\n    if len(xs) % 2!= 0:\n        raise ValueError(\"List must have an even number of coefficients\")\n\n    # Find the largest non-zero coefficient\n    max_non_zero_coeff = max(coeff for coeff in xs if coeff!= 0)\n\n    # Find the index of the largest non-zero coefficient\n    max_non_zero_index = xs.index(max_non_zero_coeff)\n\n    # Calculate the root\n    root = -xs[max_non_zero_index + 1] / xs[max_non_zero_index]\n\n    return root"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    return [x if i % 3!= 0 else sorted([y for i, y in enumerate(l) if i % 3 == 0])[k] for k, x in enumerate(l)]"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    # Separate the even and odd indices\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    odd_indices = [l[i] for i in range(1, len(l), 2)]\n\n    # Sort the even indices\n    even_indices.sort()\n\n    # Combine the sorted even indices with the odd indices\n    result = []\n    for i in range(len(even_indices)):\n        result.append(even_indices[i])\n        result.append(odd_indices[i])\n\n    return result"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode elements in each group. Unless group has fewer elements than 3.\n    groups = [group[0] + group[1:] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num: int) -> bool:\n    \"\"\"\n    Helper function to check if a number is prime.\n\n    Args:\n    num (int): The number to check.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    Returns the n-th number that is a Fibonacci number and it's also prime.\n\n    Args:\n    n (int): The position of the Fibonacci number to find.\n\n    Returns:\n    int: The n-th Fibonacci number that is also prime.\n    \"\"\"\n    a, b = 0, 1\n    count = 0\n    while True:\n        a, b = b, a + b\n        if is_prime(b):\n            count += 1\n            if count == n:\n                return b"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    for num in l:\n        complement = -num\n        for num2 in l:\n            if num!= num2 and complement - num2 in seen:\n                return True\n            seen.add(num2)\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    This function calculates the number of collisions between two sets of n cars moving in opposite directions.\n\n    The idea is to simulate the movement of the cars and count the number of collisions.\n\n    Since the cars move at the same speed, we can represent their positions as integers.\n    The left-moving cars start at positions 1 to n, and the right-moving cars start at positions n+1 to 2n.\n\n    A collision occurs when a left-moving car meets a right-moving car.\n\n    We can use a set to keep track of the positions of the right-moving cars that have not collided yet.\n\n    The time complexity of this function is O(n), where n is the number of cars.\n    \"\"\"\n\n    # Initialize a set to store the positions of the right-moving cars that have not collided yet\n    right_cars = set(range(n, 2*n+1))\n\n    # Initialize the number of collisions to 0\n    collisions = 0\n\n    # Iterate over the positions of the left-moving cars\n    for i in range(1, n+1):\n        # If the left-moving car at position i collides with a right-moving car, remove the right-moving car from the set\n        if i in right_cars:\n            right_cars.remove(i)\n            # Increment the number of collisions\n            collisions += 1\n\n    # Return the total number of collisions\n    return collisions"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    \"\"\"\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    if x == 0:\n        return '0'\n    digits = '0123456789'\n    result = ''\n    while x:\n        result = digits[x % base] + result\n        x //= base\n    return result"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"\n    Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(3, n + 1):\n            d = a + b + c + d\n            a, b, c = b, c, d\n        return d"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 0:\n        mid1 = sorted_l[n // 2 - 1]\n        mid2 = sorted_l[n // 2]\n        return (mid1 + mid2) / 2\n    else:\n        return sorted_l[n // 2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"\n    Return 2^n modulo p (be aware of numerics).\n\n    This function uses the built-in pow function in Python, which can handle large numbers and \n    efficiently compute the power of a number modulo another number.\n\n    Args:\n    n (int): The exponent.\n    p (int): The modulus.\n\n    Returns:\n    int: 2^n modulo p.\n    \"\"\"\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n\n    Parameters:\n    text (str): The input string.\n\n    Returns:\n    str: The input string without vowels.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(i < t for i in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n\n    Args:\n        s0 (str): The first word.\n        s1 (str): The second word.\n\n    Returns:\n        bool: True if the words have the same characters, False otherwise.\n    \"\"\"\n    # Remove duplicates from each string and compare the results\n    return sorted(set(s0)) == sorted(set(s1))"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    \"\"\"\n    Return n-th Fibonacci number.\n\n    Args:\n    n (int): The position of the Fibonacci number to return.\n\n    Returns:\n    int: The n-th Fibonacci number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    \"\"\"\n    This function calculates the sum of numbers from 1 to n.\n\n    Args:\n    n (int): The upper limit of the sum.\n\n    Returns:\n    int: The sum of numbers from 1 to n.\n    \"\"\"\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    \"\"\"\n    Checks if every opening bracket in the string has a corresponding closing bracket.\n\n    Args:\n        brackets (str): A string of \"(\" and \")\".\n\n    Returns:\n        bool: True if every opening bracket has a corresponding closing bracket, False otherwise.\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\"\n    This function calculates the derivative of a polynomial given its coefficients.\n\n    Args:\n        xs (list): A list of coefficients of a polynomial.\n                  xs[0] is the coefficient of x^0, xs[1] is the coefficient of x^1, and so on.\n\n    Returns:\n        list: A list of coefficients of the derivative of the polynomial.\n    \"\"\"\n    # If the polynomial is a constant, its derivative is 0\n    if len(xs) == 1:\n        return [0]\n\n    # Initialize an empty list to store the coefficients of the derivative\n    derivative_coeffs = []\n\n    # The derivative of x^n is n*x^(n-1), so we multiply each coefficient by its exponent\n    for i in range(1, len(xs)):\n        # The exponent is the index of the coefficient minus 1\n        exponent = i - 1\n        # Multiply the coefficient by the exponent\n        derivative_coeffs.append(exponent * xs[i])\n\n    return derivative_coeffs"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    \"\"\"\n    Compute the n-th element of the FibFib number sequence.\n\n    The FibFib number sequence is defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\n    Args:\n        n (int): The index of the element to compute.\n\n    Returns:\n        int: The n-th element of the FibFib number sequence.\n    \"\"\"\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(2, n):\n            a, b, c = b, c, a + b + c\n        return c"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"\n    This function counts the number of vowels in a given string.\n    Vowels are 'a', 'e', 'i', 'o', 'u'. 'y' is also a vowel if it's at the end of the word.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    int: The number of vowels in the string.\n    \"\"\"\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n        elif char.lower() == 'y' and s.endswith(char):\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    str_x = str(x)\n    shift = shift % len(str_x)\n    return str_x[-shift:] + str_x[:-shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    \"\"\"\n    This function calculates the number of mango fruits in a basket given the total number of fruits, \n    the number of apples, and the number of oranges.\n\n    Parameters:\n    s (str): A string representing the number of apples and oranges in the basket.\n    n (int): The total number of fruits in the basket.\n\n    Returns:\n    int: The number of mango fruits in the basket.\n    \"\"\"\n\n    # Split the string into two parts: the number of apples and the number of oranges\n    apples, oranges = s.split(' and ')\n\n    # Extract the numbers from the strings\n    apples = int(apples.split(' ')[0])\n    oranges = int(oranges.split(' ')[0])\n\n    # Calculate the number of mango fruits\n    mangoes = n - apples - oranges\n\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smallest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n    \"\"\"\n    even_nodes = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not even_nodes:\n        return []\n    return [min(even_nodes, key=lambda x: (x[0], x[1]))]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    max_num = -1\n    for num in sorted(freq.keys(), reverse=True):\n        if num > 0 and freq[num] >= num:\n            max_num = num\n            break\n\n    return max_num"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n\n    sorted_lst = sorted(lst)\n    result = []\n    i, j = 0, len(sorted_lst) - 1\n\n    while i <= j:\n        result.append(sorted_lst[i])\n        if i!= j:\n            result.append(sorted_lst[j])\n        i += 1\n        j -= 1\n\n    return result"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # Return -1 if the three sides do not form a valid triangle\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    # Check if the list is a palindrome\n    if q!= q[::-1]:\n        return False\n\n    # Calculate the sum of the elements in the list\n    total_weight = sum(q)\n\n    # Return True if the sum is less than or equal to the maximum possible weight\n    return total_weight <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    count = 0\n    freq = {}\n\n    # Count the frequency of each element in the array\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Count the frequency of elements that appear an odd number of times\n    for count in freq.values():\n        if count % 2!= 0:\n            count -= 1\n\n    return count"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    # Calculate the total number of characters in each list\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n\n    # Compare the totals and return the list with less characters\n    if total1 <= total2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            if is_prime(i) and is_prime(a // i) and is_prime(a // i // i):\n                return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x < 1:\n        return False\n    while x % n == 0:\n        x = x // n\n    return x == 1"}
{"task_id": "HumanEval/77", "completion": "import math\n\ndef iscube(a):\n    \"\"\"\n    Checks if a given integer is a cube of some integer number.\n\n    Parameters:\n    a (int): The input integer to check.\n\n    Returns:\n    bool: True if the integer is a cube, False otherwise.\n    \"\"\"\n    root = round(math.pow(a, 1/3))\n    return root ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_hex_digits = '23BD'\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"\n    This function takes a list of GPAs and returns a list of corresponding letter grades.\n\n    Parameters:\n    grades (list): A list of GPAs.\n\n    Returns:\n    list: A list of letter grades.\n    \"\"\"\n\n    # Define a dictionary to map GPAs to letter grades\n    grade_map = {\n        'A+': (4.0, float('inf')),\n        'A': (3.7, 4.0),\n        'A-': (3.3, 3.7),\n        'B+': (3.0, 3.3),\n        'B': (2.7, 3.0),\n        'B-': (2.3, 2.7),\n        'C+': (2.0, 2.3),\n        'C': (1.7, 2.0),\n        'C-': (1.3, 1.7),\n        'D+': (1.0, 1.3),\n        'D': (0.7, 1.0),\n        'D-': (0.0, 0.7),\n        'E': (0.0, 0.0)\n    }\n\n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n\n    # Iterate over each GPA in the input list\n    for grade in grades:\n        # Initialize a flag to indicate if the grade has been matched\n        matched = False\n\n        # Iterate over each grade in the grade map\n        for letter, (lower, upper) in grade_map.items():\n            # Check if the GPA is within the range of the current grade\n            if lower < grade <= upper:\n                # If it is, append the letter grade to the list and set the flag to True\n                letter_grades.append(letter)\n                matched = True\n                break\n\n        # If the GPA is not matched, append 'E' to the list\n        if not matched:\n            letter_grades.append('E')\n\n    # Return the list of letter grades\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary = bin(N)[2:]  # Convert N to binary and remove the '0b' prefix\n    return str(sum(int(digit) for digit in binary))  # Sum the digits and convert to string"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2!= 0 and num % 2 == 0)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    \"\"\"\n    This function takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all the characters in each word\n    are replaced by a new word where all the characters arranged in ascending order\n    based on ascii value. The order of words and blank spaces in the sentence is kept.\n    \"\"\"\n    return''.join(''.join(sorted(word)) for word in s.split())"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    This function finds the coordinates of the given integer x in a 2D list.\n\n    Args:\n        lst (list): A 2D list of integers.\n        x (int): The integer to be searched in the list.\n\n    Returns:\n        list: A list of tuples representing the coordinates of x in the list.\n    \"\"\"\n\n    # Initialize an empty list to store the coordinates\n    coordinates = []\n\n    # Iterate over each row in the list with its index\n    for i, row in enumerate(lst):\n        # Check if the given integer x is in the current row\n        if x in row:\n            # Find the index of the integer x in the row\n            j = row.index(x)\n            # Append the coordinates to the list\n            coordinates.append((i, j))\n\n    # Sort the coordinates by row in ascending order and then by column in descending order\n    coordinates.sort(key=lambda x: (x[0], -x[1]))\n\n    return coordinates"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return array\n    elif len(array) == 1:\n        return array\n    else:\n        sum_first_last = array[0] + array[-1]\n        if sum_first_last % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 97 if char.islower() else 65\n            result += chr((ord(char) - ascii_offset + 2 * 2) % 26 + ascii_offset)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2 or len(set(lst)) < 2:\n        return None\n    return sorted(lst)[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a given string of words.\n\n    A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    Parameters:\n    S (str): The input string.\n\n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    sentences = S.replace('?', '.').replace('!', '.').split('.')\n    return sum(1 for sentence in sentences if sentence.strip() and sentence.strip()[0].lower() == 'i')"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n\n    # Check if one of the numbers is equal to the sum of the other two\n    return (x == y + z or y == x + z or z == x + y)"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            index = vowels.index(char)\n            encoded_char = chr(ord(char) + 2)\n            if encoded_char not in vowels:\n                encoded_message += encoded_char\n            else:\n                # If the character is 'u' or 'U', we need to wrap around to the start of the alphabet\n                if char == 'u' or char == 'U':\n                    encoded_char = 'a' if char.islower() else 'A'\n                # If the character is 'a' or 'A', we need to wrap around to the end of the alphabet\n                elif char == 'a' or char == 'A':\n                    encoded_char = 'c' if char.islower() else 'C'\n                else:\n                    # If the character is 'e' or 'E', we need to wrap around to the middle of the alphabet\n                    if char == 'e' or char == 'E':\n                        encoded_char = 'g' if char.islower() else 'G'\n                    # If the character is 'i' or 'I', we need to wrap around to the end of the alphabet\n                    elif char == 'i' or char == 'I':\n                        encoded_char = 'k' if char.islower() else 'K'\n                    # If the character is 'o' or 'O', we need to wrap around to the start of the alphabet\n                    elif char == 'o' or char == 'O':\n                        encoded_char = 'q' if char.islower() else 'Q'\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = max([num for num in lst if is_prime(num)])\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:  # Check if the dictionary is empty\n        return False\n\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n\n    return all_lower or all_upper"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n        if len(primes) == n - 1:\n            break\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    count = 0\n    for i, char in enumerate(s):\n        if i % 2 == 0 and char.upper() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    \"\"\"\n    Returns the closest integer to the given value.\n    If the number is equidistant from two integers, round it away from zero.\n\n    Parameters:\n    value (str): A string representing a number.\n\n    Returns:\n    int: The closest integer to the given value.\n    \"\"\"\n    # Convert the string to a float to perform mathematical operations\n    num = float(value)\n\n    # Use the built-in round function to round the number to the nearest integer\n    # The second argument to round is the number of decimal places to round to\n    # Since we want to round to the nearest integer, we pass 0\n    # If the number is equidistant from two integers, round will round away from zero\n    return round(num)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    for _ in range(n - 1):\n        n += 1\n        if n % 2 == 0:\n            n += 1\n        pile.append(n)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    \"\"\"\n    This function takes a string of words separated by commas or spaces and returns \n    an array of the words.\n\n    Parameters:\n    s (str): The input string of words.\n\n    Returns:\n    list: A list of words.\n    \"\"\"\n    # Replace commas with spaces to ensure consistent separation\n    s = s.replace(\",\", \" \")\n\n    # Split the string into words\n    words = s.split()\n\n    # Return the list of words\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    # Find the maximum even number in the range [x, y]\n    max_even = max(range(x, y + 1), key=lambda i: i if i % 2 == 0 else float('-inf'))\n\n    # If max_even is not in the range [x, y], return -1\n    if max_even < x or max_even > y:\n        return -1\n\n    return max_even"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    avg = round(total / (m - n + 1))\n    return bin(avg)[2:]"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    def has_even_digit(n):\n        return any(int(digit) % 2 == 0 for digit in str(n))\n\n    return sorted([num for num in x if not has_even_digit(num)])"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # Filter the array to include only numbers between 1 and 9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n\n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n\n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n\n    # Replace each digit with its corresponding name\n    digit_names = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\",\n        6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    result = [digit_names[num] for num in reversed_arr]\n\n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1] and i % 2 == 0:\n            even += 1\n        elif str(i) == str(i)[::-1] and i % 2!= 0:\n            odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    # If the array is empty, return True\n    if not arr:\n        return True\n\n    # Find the minimum element in the array\n    min_element = min(arr)\n\n    # Find the index of the minimum element\n    min_index = arr.index(min_element)\n\n    # If the minimum element is at the beginning of the array, return True\n    if min_index == 0:\n        return True\n\n    # Otherwise, return False\n    return False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # Check if all elements in lst1 are even\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n\n    # Check if all elements in lst2 are odd\n    if all(num % 2!= 0 for num in lst2):\n        return \"NO\"\n\n    # If not all elements in lst1 are even, and not all elements in lst2 are odd,\n    # it is possible to exchange elements to make all elements in lst1 even\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    if not test:\n        return {}\n\n    words = test.split()\n    letter_count = {}\n\n    for word in words:\n        if word in letter_count:\n            letter_count[word] += 1\n        else:\n            letter_count[word] = 1\n\n    max_count = max(letter_count.values())\n\n    result = {letter: count for letter, count in letter_count.items() if count == max_count}\n\n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # Convert the string c to a set for efficient lookups\n    c_set = set(c)\n\n    # Filter out characters in s that are in c_set\n    result = [char for char in s if char not in c_set]\n\n    # Check if the result string is equal to its reverse\n    is_palindrome = result == result[::-1]\n\n    return (''.join(result), is_palindrome)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    return [f\"the number of odd elements {len([int(digit) for digit in s if int(digit) % 2!= 0])}n the str{len(s)}ng {len(s)} of the {len(s)}nput.\" for s in lst]"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        int: The minimum sum of any non-empty sub-array of nums.\n    \"\"\"\n    min_sum = float('inf')  # Initialize the minimum sum as infinity\n    current_sum = 0  # Initialize the current sum as 0\n\n    for num in nums:\n        current_sum = min(num, current_sum + num)  # Update the current sum\n        min_sum = min(min_sum, current_sum)  # Update the minimum sum\n\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    \"\"\"\n    Calculate the minimum number of times a bucket of capacity 'capacity' needs to be lowered to empty all wells in the grid.\n\n    Parameters:\n    grid (list): A 2D list representing the wells, where 1 represents a unit of water and 0 represents an empty space.\n    capacity (int): The capacity of the bucket.\n\n    Returns:\n    int: The minimum number of times the bucket needs to be lowered.\n    \"\"\"\n\n    # Get the number of rows and columns in the grid\n    rows, cols = len(grid), len(grid[0])\n\n    # Initialize the total water to be extracted\n    total_water = 0\n\n    # Calculate the total water in the grid\n    for row in grid:\n        total_water += sum(row)\n\n    # Calculate the minimum number of times the bucket needs to be lowered\n    return math.ceil(total_water / capacity)"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(abs(x)).count('1'), abs(x)))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    \"\"\"\n    Returns a list of words from string s that contain exactly n consonants.\n\n    Parameters:\n    s (str): The input string.\n    n (int): The number of consonants.\n\n    Returns:\n    list: A list of words with exactly n consonants.\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate over each word in the list of words\n    for word in words:\n        # Initialize a counter for consonants\n        consonant_count = 0\n\n        # Iterate over each character in the word\n        for char in word:\n            # Check if the character is a consonant (not a vowel and not a space)\n            if char.lower() not in 'aeiou ':\n                # Increment the consonant counter\n                consonant_count += 1\n\n        # Check if the word has exactly n consonants\n        if consonant_count == n:\n            # Add the word to the result list\n            result.append(word)\n\n    # Return the list of words with exactly n consonants\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = 'AEIOU'\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in vowels:\n            if word[i - 1] not in vowels and word[i + 1] not in vowels:\n                return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    open_parens = lst[0].count('(')\n    close_parens = lst[1].count(')')\n\n    if open_parens == close_parens:\n        return 'Yes'\n    elif open_parens > close_parens:\n        return 'No'\n    else:\n        return 'Yes'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    :param arr: A list of integers\n    :type arr: list\n    :param k: A positive integer\n    :type k: int\n    :return: A sorted list of length k with the maximum k numbers in arr\n    :rtype: list\n    \"\"\"\n    # Sort the array in descending order\n    sorted_arr = sorted(arr, reverse=True)\n\n    # Return the first k elements of the sorted array\n    return sorted_arr[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2!= 0)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Args:\n        arr (list): A list of integers.\n        k (int): The number of elements to consider from the start of the array.\n\n    Returns:\n        int: The sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(num for num in arr[:k] if num <= 99)"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    sequence = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2!= 0:  # only append odd numbers to the sequence\n            sequence.append(n)\n    return sorted(list(set(sequence)))"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    # Split the date string into month, day, and year\n    try:\n        month, day, year = date.split('-')\n    except ValueError:\n        return False\n\n    # Check if the date string is not empty\n    if not date:\n        return False\n\n    # Check if the date is in the correct format\n    if len(month)!= 2 or len(day)!= 2 or len(year)!= 4:\n        return False\n\n    # Check if the month is valid\n    if not (1 <= int(month) <= 12):\n        return False\n\n    # Check if the day is valid\n    if int(month) in [1, 3, 5, 7, 8, 10, 12]:\n        if not (1 <= int(day) <= 31):\n            return False\n    elif int(month) in [4, 6, 9, 11]:\n        if not (1 <= int(day) <= 30):\n            return False\n    elif int(month) == 2:\n        if not (1 <= int(day) <= 29):\n            return False\n\n    # Check if the year is valid\n    if not (1900 <= int(year) <= 9999):\n        return False\n\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    \"\"\"\n    if ',' in txt:\n        return txt.split(',')\n    elif'' in txt:\n        return txt.split()\n    else:\n        return sum(1 for i, c in enumerate(txt) if c.islower() and i % 2!= 0)"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    return len(lst) == len(set(lst)) and all(lst[i] <= lst[i+1] for i in range(len(lst)-1))"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    intersection_length = intersection_end - intersection_start + 1\n    if intersection_start > intersection_end:\n        return \"NO\"\n    if intersection_length <= 1:\n        return \"NO\"\n    for i in range(2, int(intersection_length ** 0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    signs = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]\n    product = 1\n    for sign in signs:\n        product *= sign\n\n    return sum(abs(x) for x in arr) * product"}
{"task_id": "HumanEval/129", "completion": ""}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"\n    Returns the first n + 1 numbers of the Tribonacci sequence.\n\n    The Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\n    Args:\n        n (int): A non-negative integer.\n\n    Returns:\n        list: The first n + 1 numbers of the Tribonacci sequence.\n    \"\"\"\n    sequence = [0] * (n + 1)\n    sequence[1] = 3\n    sequence[2] = 1 + 2 / 2\n\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            sequence[i] = 1 + i / 2\n        else:\n            sequence[i] = sequence[i - 1] + sequence[i - 2] + sequence[i + 1]\n\n    return sequence"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2!= 0:\n            product *= int(digit)\n    return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    \"\"\"\n    This function takes a list of numbers, rounds each number to the upper integer using math.ceil,\n    squares each number, and returns the sum of the squared numbers.\n\n    Parameters:\n    lst (list): A list of numbers.\n\n    Returns:\n    int: The sum of the squared numbers in the list.\n    \"\"\"\n    return sum(math.ceil(num) ** 2 for num in lst)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    # Remove leading and trailing spaces\n    txt = txt.strip()\n\n    # If the string is empty, return False\n    if not txt:\n        return False\n\n    # Split the string into words\n    words = txt.split()\n\n    # Get the last word\n    last_word = words[-1]\n\n    # Check if the last character of the last word is an alphabetical character\n    return last_word and last_word[-1].isalpha()"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            return i - 1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    negative_integers = [i for i in lst if i < 0]\n    positive_integers = [i for i in lst if i > 0]\n\n    if negative_integers:\n        max_negative = max(negative_integers)\n    else:\n        max_negative = None\n\n    if positive_integers:\n        min_positive = min(positive_integers)\n    else:\n        min_positive = None\n\n    return max_negative, min_positive"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    # Convert strings to floats\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    # Compare the values\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    def can_be_written_as_sum_of_four_even_numbers(num):\n        for i in range(2, num):\n            for j in range(i, num):\n                for k in range(j, num):\n                    for last in range(k, num):\n                        if i + j + k + last == num and i % 2 == 0 and j % 2 == 0 and k % 2 == 0 and last % 2 == 0:\n                            return True\n        return False\n\n    return can_be_written_as_sum_of_four_even_numbers(n)"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if n <= 0:\n        return 0\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = text.replace(\"  \", \"-\")\n    while \"  \" in text:\n        text = text.replace(\"  \", \"-\")\n    return text.replace(\" \", \"_\")"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    # Check if the file name contains exactly one dot\n    if file_name.count('.')!= 1:\n        return 'No'\n\n    # Split the file name into two parts: before and after the dot\n    before_dot, after_dot = file_name.split('.')\n\n    # Check if the substring before the dot is not empty and starts with a latin letter\n    if not before_dot or not before_dot[0].isalpha():\n        return 'No'\n\n    # Check if the substring after the dot is one of the allowed extensions\n    if after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    # Check if there are more than three digits in the file name\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function takes a list of integers, squares the entry if its index is a multiple of 3, \n    cubes the entry if its index is a multiple of 4 and not a multiple of 3, \n    and returns the sum of all entries.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    int: The sum of all entries in the list after applying the specified operations.\n    \"\"\"\n    return sum(\n        num ** 2 if i % 3 == 0 else \n        num ** 3 if i % 4 == 0 and i % 3!= 0 else \n        num for i, num in enumerate(lst)\n    )"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = [word for word in words if is_prime(len(word))]\n    return''.join(result)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    from fractions import Fraction\n\n    # Convert the input strings to Fraction objects\n    frac_x = Fraction(x)\n    frac_n = Fraction(n)\n\n    # Multiply the fractions\n    result = frac_x * frac_n\n\n    # Check if the result is a whole number (i.e., its denominator is 1)\n    return result.denominator == 1"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2!= 0 and (num // 10) % 10 % 2!= 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    \"\"\"\n    This function calculates the number of triples (a[i], a[j], a[k]) of array a \n    where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Args:\n        n (int): A positive integer.\n\n    Returns:\n        int: The number of valid triples.\n    \"\"\"\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n\n    if index1 > index2:\n        index1, index2 = index2, index1\n\n    return tuple(planets[index1 + 1:index2])"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n\n    # Sort the list by length and then alphabetically\n    sorted_strings = sorted(even_length_strings, key=lambda x: (len(x), x))\n\n    return sorted_strings"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    def is_prime(num):\n        \"\"\"Check if a number is prime.\"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(i ** 2 for i in lst if isinstance(i, int) and i % 2!= 0)"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(g - s) if g!= s else 0 for g, s in zip(game, guess)]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest = max(extensions, key=lambda x: sum(1 for c in x if c.isupper()) - sum(1 for c in x if c.islower()))\n    return f\"{class_name}.{strongest}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b in a + a:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even = 0\n    odd = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    roman_numerals = {\n        1000:'m', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n\n    Parameters:\n    a (int): The length of the first side\n    b (int): The length of the second side\n    c (int): The length of the third side\n\n    Returns:\n    bool: True if the three sides form a right-angled triangle, False otherwise\n    \"\"\"\n    # Sort the sides in ascending order\n    sides = sorted([a, b, c])\n\n    # Check if the square of the longest side is equal to the sum of the squares of the other two sides\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars and word < max_word:\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # Calculate the total number of carrots eaten by adding the number of carrots already eaten and the number of carrots needed\n    total_eaten = number + need\n\n    # Calculate the number of carrots left by subtracting the total number of carrots eaten from the remaining carrots\n    carrots_left = max(0, remaining - need)\n\n    # Return the total number of carrots eaten and the number of carrots left\n    return [total_eaten, carrots_left]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator=['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n    # Initialize the result with the first operand\n    result = operand[0]\n\n    # Iterate over the operators and operands\n    for i in range(len(operator)):\n        # Get the current operator and operand\n        op = operator[i]\n        operand_val = operand[i + 1]\n\n        # Perform the operation based on the operator\n        if op == '+':\n            result += operand_val\n        elif op == '-':\n            result -= operand_val\n        elif op == '*':\n            result *= operand_val\n        elif op == '//':\n            result //= operand_val\n        elif op == '**':\n            result **= operand_val\n\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    # Ensure a is less than or equal to b\n    if a > b:\n        a, b = b, a\n\n    # Generate a list of even numbers between a and b\n    even_numbers = [i for i in range(a, b+1) if i % 2 == 0]\n\n    return even_numbers"}
